/* Création de ma première liste */
$padding-dimension: 1rem 2rem 3rem 4rem;

/* Application de cette liste à un selecteur */
.block {
    padding: $padding-dimension;
}

/* Création d'une liste des différentes tailles de texte utiliser dans le site */
$font-size: 7rem 5rem 4rem 2rem;

/* Nous souhaitons utiliser la valeur 2rem située dans la liste $font-size 
pour le label de notre formulaire font-size */
.form {
    &__field {
        &__label {
            font-size: nth($font-size, 4);
        }
    }
}

/* Modification d'une liste en maps en y ajoutant une clef */
$font-size: (
    logo: 7rem,
    heading: 5rem,
    project-heading: 4rem,
    label: 2rem
);

/* Mise en application d'une map */
.form {
    &__field {
        & label {
            font-size: map-get($map: $font-size, $key: label);
        }
    }
}

/* Seconde mise en application */
$color-primary: #15DEA5;
$color-secondary: #001534;
$color-accent: #D6FFF5;
$color-white: #fff;
$color-invalid: #DB464B;

$input-txt-palette: (
    active: (
        bg: $color-primary,
        border: $color-primary,
        txt: $color-white,
    ),

    focus: (
        bg: $color-primary,
        border: $color-primary,
        txt: $color-white
    ),

    invalid: (
        bg: $color-invalid,
        border: $color-white,
        txt: $color-white,
    )
);

/* Utiliser les mixins avec les maps */
@mixin input-txt-palette {
    border: .1rem solid $border;
    background-color: $bg;
    color: $txt;
}

/* Pour déclarer de quel état (hover, etc) obtenir les informations, vous devez assigner un argument our l'état
que vous pouvez passer dans la mixin : */

@mixin input-txt-palette($state) {
    border: .1rem sold $border;
    background-color: $bg;
    color: $txt;
}

/* Intégration de la map dans ma mixin */
@mixin input-txt-palette($state) {
    $palette: map-get($input-txt-palette, $state); /* Je stocke ma map et son été dans ma variable $palette*/
    border: .1rem solid $border;
    background-color: $bg;
    color: $txt;
}

/* Je remplis les valeurs de mon ensemble de règles css grâce à la fonction map-get() */
@mixin input-txt-palette($palettes) {
    @each $state, $palette in $palettes {
        $palette: map-get($input-txt-palette, $state);
        border: .1rem solid map-get($map: $palette, $key: border );
        background-color: map-get($map: $palette, $key: bg );
        color: map-get($map: $palette, $key: txt );
}
}

/* J'applique ma mixin à mon sélecteur par défaut et inactif form__txt input */
.form {
    &__field {
        & input {
            @include input-txt-palette(focus);
        }
    }
}

/* Création d'un boucle */
/*@each $key, $value in $map {

}*/

@mixin input-txt-palette($palettes) {
    @each $state, $palette in $palettes {
        &:#{$state} {
            border: .1rem solid map-get($palette, border);
            background-color: map-get($palette, bg);
            color: map-get($map: $palette, $key: txt );  
        } 
    }
}

/* Media queries avec SASS */
$breakpoints : (
    mobile: 599px
);

/* Media queries dans une mixin */
@mixin mobile-only {
    @media screen and (max-width: map-get($breakpoints, mobile)) {
        grid-template-columns: 1fr;
    }
}

.proj-grid {
    display: grid;
    grid-template-columns: repeat(3n 1fr);
    @include mobile-only;
}

/* Remplacement du contenu du media queries dans la mixin */
@mixin mobile-only {
    @media screen and (max-width: map-get($breakpoints, mobile)) {
       @content;
    }
}

.proj-grid {
    display: grid;
    grid-template-columns: repeat(3n 1fr);
    @include mobile-only {
        grid-template-columns: 1fr;
    }
}

$color-modificator : (
    orange: #cc8624,
    pink: #cc2475,
    blue: #2469cc,
    green: #24cc24,
    purple: purple
);

@mixin color-modificator($colors) {
    @each $mod, $val in $colors {
        &--#{$mod} {
            color: $val;
        }
    }
}

/* Challenge modificateur */
.article__headline {
    @include color-modificator($color-modificator);
};